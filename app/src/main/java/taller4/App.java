/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;

import java.text.DecimalFormat;


public class App {
    

    public static void main(String[] args) {
        try {
            

            System.out.println("\n"+ impares(100) + "\n");

            System.out.println(Fibonacci(12) + "\n");

            //espacio para el ciclo for del ejercicio 3

            final byte veint = 20, trein = 30, uno = 1;
            int nroal = (int)(Math.random() * ((trein - veint + uno) + veint));
            short var_ciclo;
                
            for(var_ciclo = uno; var_ciclo <= nroal; var_ciclo++){
                System.out.println(Raiz_random());
            }

            //fin del ciclo diseñado para el ejercicio 3.
            

            System.out.println( "\n" + Numeros_pares(78, 1) + "\n");

            System.out.println(Suma_aleatoria((byte) 1) + "\n");

            System.out.println(loteria() + "\n");

                 
        } catch (Exception e) {
            System.err.println("Se ha producido un error inesperado: " + e.getMessage());
           
            
        }
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main


    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */

    public static String impares(int numero) {
        try {
            int cien = 100, quinientos = 500, ocho = 8;
            String numeros_impares = "";
            int contador = 0; 
    
            
            if (numero < cien || numero > quinientos) {
                return "Número no válido, por favor intente de nuevo.";
            } else {
                
    
                for (int var_ciclo = 1; var_ciclo <= numero; var_ciclo++) {
                    if (var_ciclo % 2 != 0) { 
                        numeros_impares += var_ciclo;
                        contador++; 
    
                        
                        if (contador < ocho && var_ciclo < numero) {
                            numeros_impares += ", "; 
                        } else {
                            numeros_impares += "\n"; 
                            contador = 0; 
                        }
                    }
                }
                return numeros_impares; 
            }
        } catch (Exception e) {
            return "Ha ocurrido un error inesperado" + e;
        }
    }
    

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */

    public static String Fibonacci(int n) {
        try {
            int num = 0, num1 = 1, suma, fibo;
            final byte dos = 2, uno = 1;
            String sucesion = "";
            if (n <= dos)
                return "Has ingresado un número no válido, por favor intenta de nuevo con uno que sea mayor que dos.";
            else {
                for (fibo = uno; fibo <= n; fibo++) {
                    suma = num + num1;
                    sucesion += String.valueOf(suma);
                    sucesion += ", ";
                    num = num1;
                    num1 = suma;
                }
                return sucesion;
            }
        } catch (Exception e) {
            return "Lo sentimos, ha ocurrido un error inesperado." + e;
        }
    }
    

    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */

    public static double Raiz_random(){
        try {

            final short dos = 2, trescin = 355;
            double numal = (Math.random() * ((trescin - dos + 1) + dos));
            double raiz = Math.sqrt(numal);

            return raiz;
            
        } catch (Exception e) {
            return -1;
        }


    }

    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */
    public static String Numeros_pares(int valorinicial, int valorfinal){
        try {

            if (valorfinal <= valorinicial )
                return "Has ingresado un intervalo no válido, por favor intenta de nuevo.";
            

            final short nov = 900, uno = 1, dos = 2, cero = 0;
            int interacion;
            int aleatorioo;
            short pares = 0;

            for(interacion = uno; interacion <= nov; interacion++){
                aleatorioo =  (int)(Math.random()*(valorfinal - valorinicial + uno)+ valorinicial);

                    if(aleatorioo % dos == cero)
                        pares ++;

            }
            return "Fueron generados " + pares + " números pares.";

        } catch (Exception e) {
            return "Ha ocurrido un error inesperado" + e;
        }


    }

    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.

      
    */

    public static double  Suma_aleatoria(byte aleatorios_a_generar){
        try {

            final short  uno = 1, veinte = 20, liminf = 50, limsup = 150;
            double suma = 0;
            float random;
            byte var_i;

            if(aleatorios_a_generar < uno || aleatorios_a_generar > veinte) 
                    return 0;
            else{
                for(var_i = uno; var_i <= aleatorios_a_generar; var_i ++){
                    random = (float) Math.random()*(limsup - liminf + uno) + liminf;
                        suma += random;
                }
                    return suma;


            }
            
          
        } catch (Exception e) {
            return -117384319;

        }

    }
    
    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */

    public static String loteria() {
        try {
            DecimalFormat formato = new DecimalFormat("0000");
            String pseco = "", pmenor = "", pmayor = "", retorno;
    
            final short cero = 0, nueve = 9, veinte = 20, cien = 100, cien_cincuenta = 150, limitemax = 9999, uno = 1, quince = 15;
            int serie;
            byte repeticion_loteria;
            int premio_seco, premio_menor;
    
            int num1 = (int) (Math.random() * (nueve - cero + 1) + cero);
            int num2 = (int) (Math.random() * (nueve - cero + 1) + cero);
            int num3 = (int) (Math.random() * (nueve - cero + 1) + cero);
            int num4 = (int) (Math.random() * (nueve - cero + 1) + cero);
            String premio_mayor = String.valueOf(num1) + String.valueOf(num2) + String.valueOf(num3) + String.valueOf(num4);
    
            for (repeticion_loteria = uno; repeticion_loteria <= veinte; repeticion_loteria++) {
                serie = (int) (Math.random() * (cien_cincuenta - cien + uno) + cien);
    
                if (repeticion_loteria <= quince) {
                    premio_menor = (int) (Math.random() * (limitemax - cero + uno) + cero);
                    pmenor += "sorteo # " + repeticion_loteria + " - " + "Número premiado " + formato.format(premio_menor) + " - " + "Número de serie " + serie;
                    pmenor += "\n";
                } else if (repeticion_loteria > quince && repeticion_loteria < veinte) {
                    premio_seco = (int) (Math.random() * (limitemax - cero + uno) + cero);
                    pseco += "sorteo # " + repeticion_loteria + " - " + "Número premiado " + formato.format(premio_seco) + " - " + "Número de serie " + serie;
                    pseco += "\n";
                } else if (repeticion_loteria == veinte) {
                    pmayor = "sorteo # " + repeticion_loteria + " - " + "Número premiado " + premio_mayor + " - " + "Número de serie " + serie;
                }
            }
    
            retorno = " ======PREMIOS MENORES======= " + "\n" + pmenor
                    + "======PREMIOS SECOS=========" + "\n" + pseco
                    + "======Premio mayor==========" + "\n" + pmayor;
    
            return retorno;
    
        } catch (Exception e) {
            return "Ha ocurrido un error " + e;
        }
    }
    





}

